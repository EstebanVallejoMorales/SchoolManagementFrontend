/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createStudent } from '../fn/student/create-student';
import { CreateStudent$Params } from '../fn/student/create-student';
import { getStudents$Json } from '../fn/student/get-students-json';
import { GetStudents$Json$Params } from '../fn/student/get-students-json';
import { getStudents$Plain } from '../fn/student/get-students-plain';
import { GetStudents$Plain$Params } from '../fn/student/get-students-plain';
import { Student } from '../models/student';

@Injectable({ providedIn: 'root' })
export class StudentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getStudents()` */
  static readonly GetStudentsPath = '/api/Student';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStudents$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudents$Plain$Response(params?: GetStudents$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Student>>> {
    return getStudents$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStudents$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudents$Plain(params?: GetStudents$Plain$Params, context?: HttpContext): Observable<Array<Student>> {
    return this.getStudents$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Student>>): Array<Student> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStudents$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudents$Json$Response(params?: GetStudents$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Student>>> {
    return getStudents$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStudents$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStudents$Json(params?: GetStudents$Json$Params, context?: HttpContext): Observable<Array<Student>> {
    return this.getStudents$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Student>>): Array<Student> => r.body)
    );
  }

  /** Path part for operation `createStudent()` */
  static readonly CreateStudentPath = '/api/Student';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createStudent()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createStudent$Response(params?: CreateStudent$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return createStudent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createStudent$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  createStudent(params?: CreateStudent$Params, context?: HttpContext): Observable<void> {
    return this.createStudent$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
